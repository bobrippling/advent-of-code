#!/usr/bin/perl
# --- Day 4: Secure Container ---

# You arrive at the Venus fuel depot only to discover it's protected by a password. The Elves had written the password on a sticky note, but someone threw it out.

# However, they do remember a few key facts about the password:

#     It is a six-digit number.
#     The value is within the range given in your puzzle input.
#     Two adjacent digits are the same (like 22 in 122345).
#     Going from left to right, the digits never decrease; they only ever increase or stay the same (like 111123 or 135679).

# Other than the range rule, the following are true:

#     111111 meets these criteria (double 11, never decreases).
#     223450 does not meet these criteria (decreasing pair of digits 50).
#     123789 does not meet these criteria (no double).

# How many different passwords within the range given in your puzzle input meet these criteria?

# Your puzzle input is 171309-643603.

# length: 6
# range: 171309-643603
# /.*(.)\1.*/
# /(.)(.)/g --> \1 <= \2

# part 2
# An Elf just remembered one more important detail: the two adjacent matching digits are not part of a larger group of matching digits.

# Given this additional criterion, but still ignoring the range rule, the following are now true:

#     112233 meets these criteria because the digits never decrease and all repeated digits are exactly two digits long.
#     123444 no longer meets the criteria (the repeated 44 is part of a larger group of 444).
#     111122 meets the criteria (even though 1 is repeated more than twice, it still contains a double 22).

# How many different passwords within the range given in your puzzle input meet all of the criteria?

use strict;
use warnings;

sub always_increasing {
	my($x, $istest) = @_;
	my @parts = split //, $x;

	for(my $i = 1; $i < @parts; $i++){
		if($parts[$i - 1] > $parts[$i]){
			print "$parts[$i - 1] > $parts[$i]" if $istest;
			return 0;
		}
	}
	return 1;
}

sub dup {
	my $x = shift();
	my @parts = split //, $x;
	my %counts;
	my $foundtwo = 0;

	for(my $i = 0; $i < @parts; $i++){
		$counts{$parts[$i]}++;
	}

	# two adjacent digits are the same
	# two adjacent digits are not part of a larger group
	for(values %counts){
		if($_ == 2){
			#print "foundtwo($_)";
			$foundtwo = 1;
		}
	}

	return $foundtwo;
}

sub pass {
	my($x, $istest) = @_;

	if(length($x) != 6){
		print "length fail" if $istest;
		return 0;
	}

	if(!$istest && !(171309 <= $x && $x <= 643603)){
		print "range fail" if $istest;
		return 0;
	}

	if(!dup($x)){
		print "dup fail" if $istest;
		return 0;
	}

	if(!always_increasing($x, $istest)){
		print "inc fail" if $istest;
		return 0;
	}

	return 1;
}

my $failed = 0;
sub eg {
	my($x, $expected) = @_;
	print "$x ";
	if(pass($x, 1) != $expected){
		print " \x1b[31mfailing\x1b[0m\n";
		$failed = 1;
	}else{
		print " \x1b[32mpassing\x1b[0m\n";
	}
}

#eg('111111', 1);
#eg('223450', 0);
#eg('123789', 0);

eg('112233', 1);
eg('123444', 0);
eg('111122', 1);
eg('112334', 1);
eg('111223', 1);
eg('111111', 0);

eg('114555', 1);
eg('122344', 1);
eg('711117', 0);

exit 1 if $failed;
#exit 0;

my $passes = 0;
for(my $i = 171309; $i <= 643603; $i++){
	my $s = sprintf "%06d", $i;
	if(pass($s)){
		$passes++;
	}
}
print "$passes\n";
